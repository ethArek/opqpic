{"version":3,"sources":["assets/upload.svg","hooks/usePostRequest.ts","components/styled/Button.tsx","components/AnimatedText.tsx","components/FileUpload.tsx","config/opq.ts","hooks/useDocumentTitle.ts","components/ImagePage.tsx","routes/Router.tsx","components/GlobalStyles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","usePostRequest","url","data","useState","isLoading","setIsLoading","responseData","setResponseData","error","setError","useCallback","a","axios","method","result","sendData","Button","styled","button","Wrapper","div","AnimatedText","activePart","setActivePart","cursor","show","onTypingDone","Delay","ms","avgTypingDelay","Label","label","upload","Name","h2","ButtonWrapper","Input","input","FileUpload","file","setFile","fileData","setFileData","callApi","useHistory","name","onChange","e","currentTarget","files","reader","FileReader","onload","event","fileBase64","target","readAsDataURL","type","accept","onClick","API","UPLOAD_OPTIONS","autostart","endpoint","params","blockSize","partSize","DOWNLOAD_OPTIONS","useDocumentTitle","title","useEffect","document","ImagePage","handle","match","image","setImage","fileName","setFileName","MasterHandle","uploadOpts","downloadOpts","downloadFile","toFile","then","addEventListener","this","src","alt","history","createBrowserHistory","Router","path","component","exact","GlobalStyle","createGlobalStyle","App","GlobalStyles","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ec6a274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload.90507c06.svg\";","import { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\ntype Result = {\r\n  data: {\r\n    imageDetails: {\r\n      handle: string;\r\n    };\r\n  };\r\n};\r\n\r\nfunction usePostRequest(url: string, data: any) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [responseData, setResponseData] = useState();\r\n  const [error, setError] = useState('');\r\n\r\n  const callApi = useCallback(() => {\r\n    const sendData = async () => {\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        const result: Result = await axios(url, { data, method: 'POST' });\r\n        setResponseData(result.data);\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    sendData();\r\n  }, [data, url]);\r\n\r\n  return [{ isLoading, responseData, error }, callApi] as any;\r\n}\r\n\r\nexport default usePostRequest;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  background-color: #4287f5;\r\n  color: #fff;\r\n  border: 2px solid transparent;\r\n  font-family: inherit;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n\r\n  &:hover {\r\n    background-color: #4257f5;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport Typist from 'react-typist';\r\nimport styled from 'styled-components';\r\n\r\nfunction AnimatedText() {\r\n  const [activePart, setActivePart] = useState(1);\r\n  return (\r\n    <Wrapper>\r\n      {activePart === 1 && (\r\n        <Typist cursor={{ show: false }} onTypingDone={() => setActivePart(2)}>\r\n          <p>Uploading file to server</p>\r\n          <Typist.Delay ms={300} />\r\n          <p>Encofing file</p>\r\n        </Typist>\r\n      )}\r\n      {activePart === 2 && (\r\n        <Typist avgTypingDelay={20}>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n          <p>41271274172412</p>\r\n        </Typist>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #000;\r\n  color: #fff;\r\n  font-family: 'Inconsolata', monospace;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport default AnimatedText;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport usePostRequest from '../hooks/usePostRequest';\r\nimport Button from './styled/Button';\r\nimport upload from '../assets/upload.svg';\r\nimport AnimatedText from './AnimatedText';\r\n\r\ntype FileData = {\r\n  fileBase64: string;\r\n  name: string;\r\n};\r\n\r\nfunction FileUpload() {\r\n  const [file, setFile] = useState<File>();\r\n  const [fileData, setFileData] = useState<FileData>();\r\n  const [{ isLoading, responseData }, callApi] = usePostRequest(\r\n    '/api/images',\r\n    fileData\r\n  );\r\n  const history = useHistory();\r\n\r\n  // useEffect(() => {\r\n  //   history.push(responseData?.data?.imageDetails?.handle);\r\n  // }, [history, responseData]);\r\n\r\n  function handleChange(e: React.FormEvent<HTMLInputElement>) {\r\n    const file = e.currentTarget.files![0];\r\n    const reader = new FileReader();\r\n    setFile(file);\r\n\r\n    reader.onload = (event: any) => {\r\n      const data = {\r\n        fileBase64: event.target.result,\r\n        name: file.name\r\n      };\r\n\r\n      setFileData(data);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      {file && <Name>{file.name}</Name>}\r\n      {!file && (\r\n        <Label>\r\n          <Input onChange={handleChange} type=\"file\" accept=\".jpg, .png\" />\r\n        </Label>\r\n      )}\r\n      {file && (\r\n        <ButtonWrapper>\r\n          <Button onClick={() => callApi()}>Upload</Button>\r\n        </ButtonWrapper>\r\n      )}\r\n      <AnimatedText />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: block;\r\n  border: 3px dashed #aaa;\r\n  width: 400px;\r\n  height: 300px;\r\n  margin-bottom: 40px;\r\n  cursor: pointer;\r\n  background: url(${upload}) no-repeat center center;\r\n  background-size: 15%;\r\n`;\r\n\r\nconst Name = styled.h2`\r\n  font-size: 18px;\r\n  color: #1b1b1b;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: none;\r\n`;\r\n\r\nexport default FileUpload;\r\n","const API = {\r\n  STORAGE_NODE: 'https://broker-1.opacitynodes.com:3000'\r\n};\r\n\r\nexport const UPLOAD_OPTIONS = {\r\n  autostart: true,\r\n  endpoint: API.STORAGE_NODE,\r\n  params: {\r\n    blockSize: 64 * 1024, // 256 KiB encryption blocks\r\n    partSize: 10 * 1024 * 1024\r\n  }\r\n};\r\n\r\nexport const DOWNLOAD_OPTIONS = {\r\n  endpoint: API.STORAGE_NODE,\r\n  autostart: true\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nfunction useDocumentTitle(title: string) {\r\n  useEffect(() => {\r\n    document.title = title;\r\n  }, [title]);\r\n}\r\n\r\nexport default useDocumentTitle;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { MasterHandle } from 'opaque';\r\n\r\nimport { UPLOAD_OPTIONS, DOWNLOAD_OPTIONS } from '../config/opq';\r\nimport useDocumentTitle from '../hooks/useDocumentTitle';\r\n\r\ninterface IProps {\r\n  match: {\r\n    params: {\r\n      handle: string;\r\n    };\r\n  };\r\n}\r\n\r\nfunction ImagePage({\r\n  match: {\r\n    params: { handle }\r\n  }\r\n}: IProps) {\r\n  const [image, setImage] = useState<string>('');\r\n  const [fileName, setFileName] = useState('');\r\n  useDocumentTitle(fileName);\r\n\r\n  useEffect(() => {\r\n    const opqHandler = new MasterHandle(\r\n      { handle },\r\n      { uploadOpts: UPLOAD_OPTIONS, downloadOpts: DOWNLOAD_OPTIONS }\r\n    );\r\n    const downloadHandler = opqHandler.downloadFile(handle);\r\n    downloadHandler.toFile().then((file: any) => {\r\n      const reader = new FileReader();\r\n      setFileName(file.name);\r\n\r\n      reader.addEventListener('load', function() {\r\n        const result = this.result as string;\r\n        setImage(result);\r\n      });\r\n\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }, [handle]);\r\n\r\n  return <img src={image} alt={fileName} />;\r\n}\r\n\r\nexport default ImagePage;\r\n","import React from 'react';\r\nimport { Router as BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport FileUpload from '../components/FileUpload';\r\nimport ImagePage from '../components/ImagePage';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter history={history}>\r\n      <Switch>\r\n        <Route path=\"/\" component={FileUpload} exact />\r\n        <Route path=\"/:handle\" component={ImagePage} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  &,\r\n  &::before, \r\n  &::after {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    font-family: \"Lato\", sans-serif;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\n\r\nimport Router from './routes/Router';\r\nimport GlobalStyles from './components/GlobalStyles';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Router />\r\n      <GlobalStyles />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}